@model DisplayBooksModel

<main class="container" style="min-height: 83vh">
    <ol class="breadcrumb">
        <li><a asp-controller="Home" asp-action="index">Home</a></li>
        <li><a href="" class="active">@Model.Category</a></li>
    </ol>
    <div class="category-title">
        <p id="category">@Model.Category</p>
        <div id="subCategory" style="display:none">@Model.SubCategory</div>
    </div>

    <div class="sort-books">
        <label for="sortSelect">Sort by: </label>
        <form id="sortForm" method="get" asp-controller="Home" asp-action="DisplayCategory">
            <input type="hidden" name="category" value="@Model.Category" />
            <select id="sortSelect" name="sortOption" onchange="document.getElementById('sortForm').submit();">
            </select>
        </form>
    </div>


    <section class="display-category">
        @if(Model.Books is null || Model.Books.Any()) {
            @foreach (var book in Model.Books)
            {
                var truncatedTitle = SD.TruncateTitle(book.Title, 12);

                <div class="box">
                    <a asp-controller="Home" asp-action="BookDetails" asp-route-id="@book.BookId"><img src="~/images/books/@book.Image" alt="@book.Title" loading="lazy" /></a>
                    <div class="book-info">
                        <p class="title">@truncatedTitle</p>
                        <p class="price">&#8369;@book.Price</p>
                        <a asp-controller="Home" asp-action="BookDetails" asp-route-id="@book.BookId">
                            <p class="see-more">see more</p>
                        </a>
                    </div>
                </div>
            }
        } else
        {
            <div style="min-height: 65vh;">
                <h1 style="margin-block-start: 8rem; font-size: 1.5rem; color: blue; font-weight: bold;">No Books Yet!!</h1>
            </div>
        }
    </section>

    @if (Model.TotalPages > 1)
    {
        <div class="pagination">
            @if (Model.CurrentPage > 1)
            {
               
                    <a asp-action="DisplayCategory"
                       asp-route-category="@Model.Category"
                       asp-route-sortOption="@Model.SubCategory"
                   asp-route-page="@(Model.CurrentPage - 1)">
                    <div class="pagination-box">Previous</div>
                   </a>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <div class="pagination-box">
                    <a asp-action="DisplayCategory"
                       asp-route-category="@Model.Category"
                       asp-route-sortOption="@Model.SubCategory"
                       asp-route-page="@i"
                       class="@(i == Model.CurrentPage ? "active" : "")">
                        <div class="pagination-box">@i</div>
                    </a>
                </div>
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <div class="pagination-box">
                    <a asp-action="DisplayCategory"
                       asp-route-category="@Model.Category"
                       asp-route-sortOption="@Model.SubCategory"
                       asp-route-page="@(Model.CurrentPage + 1)">
                        <div class="pagination-box">Next</div>
                   </a>
                </div>
            }
        </div>
    }
</main>

<script>
    function updateSubcategory() {
        const selectedCategory = document.getElementById("category").textContent.trim();
        const sortSelect = document.getElementById("sortSelect");
        const currentSubcategory = document.getElementById("subCategory").textContent.trim();
        sortSelect.innerHTML = "";

        const subcategories = {
            "Fiction": [
                "All", "Literary Fiction", "Mystery & Thriller", 
                "Science Fiction & Fantasy", "Romance", 
                "Historical Fiction", "Young Adult Fiction"
            ],
            "Non-Fiction": [
                "All", "Biography & Memoir", "Self-Help", 
                "Health & Wellness", "Travel", 
                "Cooking & Food", "True Crime", 
                "Politics & Current Events"
            ],
            "Business & Economics": [
                "All", "Entrepreneurship", "Management", 
                "Personal Finance", "Marketing", 
                "Investing", "Leadership"
            ],
            "Programming & Technology": [
                "All", "Basic Programming", "Advanced Programming", 
                "Web Development", "Data Science & AI", 
                "Software Engineering"
            ],
            "Education & Teaching": [
                "All", "Educational Materials", "Teaching Strategies", 
                "Early Childhood Education", "Study Guides & Test Prep"
            ],
            "Children’s Books": [
                "All", "Picture Books", "Early Readers", 
                "Chapter Books", "Middle Grade Fiction"
            ],
            "Graphic Novels & Comics": [
                "All", "Manga", "Superhero Comics", "Independent Comics"
            ],
            "Poetry & Drama": [
                "All", "Poetry Collections", "Plays & Screenplays"
            ],
            "Science & Nature": [
                "All", "Biology", "Physics", 
                "Environmental Science", "Astronomy"
            ],
            "Arts & Photography": [
                "All", "Art History", "Photography Techniques", "Crafts & Hobbies"
            ],
            "History": [
                "All", "Ancient History", "Modern History", 
                "Military History", "World History"
            ],
            "Spirituality & Religion": [
                "All", "Spiritual Growth", "World Religions", "Inspirational"
            ],
            "Lifestyle": [
                "All", "Home & Garden", "Hobbies & Crafts", "Fashion & Beauty"
            ],
            "Miscellaneous": [
                "All", "Reference Books", "Language Learning", "Humor"
            ]
        };

        if (subcategories[selectedCategory]) {
            subcategories[selectedCategory].forEach(subcategory => {
                sortSelect.innerHTML += `<option value="${subcategory}" ${subcategory === currentSubcategory ? "selected" : ""}>${subcategory}</option>`;
            });
        }
    }

    updateSubcategory();
 </script>